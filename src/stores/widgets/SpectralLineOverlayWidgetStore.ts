import {action, computed, observable} from "mobx";
import {Table} from "@blueprintjs/table";
import {CARTA} from "carta-protobuf";
import {AppStore} from "stores";
import {RegionWidgetStore, RegionsType} from "./RegionWidgetStore";

export enum SpectralLineQueryRangeType {
    Range = "Range",
    Center = "Center"
}

export enum SpectralLineOptions {
    Formula = "FORMULA",
    Name = "NAME",
    Frequency = "FREQ",
    RedshiftedFrequency = "REDSHIFTED_FREQ",
    QuantumNumber = "QN",
    Intensity = "I",
    AstroFilter = "ASTRO"
}

export const SPECTRAL_LINE_OPTION_DESCRIPTIONS = [
    [SpectralLineOptions.Formula, "Chemical formula of the Species"],
    [SpectralLineOptions.Name, "Name of the Species"],
    [SpectralLineOptions.Frequency, "Rest Frequency (MHz)"],
    [SpectralLineOptions.RedshiftedFrequency, "Redshifted Frequency (MHz)(generated by box on the right)"],
    [SpectralLineOptions.QuantumNumber, "Resolved Quantum Number"],
    [SpectralLineOptions.Intensity, "Intensity(for JPL/CDMS)"],
    [SpectralLineOptions.AstroFilter, "Astronomical Filter(Dark Cloud, Extragalatic, ...)"]
];

export enum RedshiftType {
    V = "V",
    Z = "Z"
}

export class SpectralLineOverlayWidgetStore extends RegionWidgetStore {
    @observable queryRangeType: SpectralLineQueryRangeType;
    @observable optionsDisplay: Map<SpectralLineOptions, boolean>;
    @observable redshiftType: RedshiftType;
    @observable redshiftSpeed: number;
    @observable queryResultTableRef: Table;
    @observable queryResult: CARTA.ICatalogColumnsData;
    @observable numVisibleRows: number;

    @action setQueryRangeType = (queryRangeType: SpectralLineQueryRangeType) => {
        this.queryRangeType = queryRangeType;
     };

    @action setOptionsDisplay = (option: SpectralLineOptions) => {
        this.optionsDisplay.set(option, !this.optionsDisplay.get(option));
    };

    @action setRedshiftType = (redshiftType: RedshiftType) => {
        this.redshiftType = redshiftType;
     };

    @action setRedshiftSpeed = (speed: number) => {
        if (isFinite(speed)) {
            this.redshiftSpeed = speed;
        }
    };

    @action setQueryResultTableRef(ref: Table) {
        this.queryResultTableRef = ref;
    }

    @computed get displayedColumnHeaders(): Array<CARTA.CatalogHeader> {
        let displayedColumnHeaders = [];
        return displayedColumnHeaders;
    }

    constructor() {
        super(RegionsType.CLOSED);
        this.queryRangeType = SpectralLineQueryRangeType.Range;
        this.optionsDisplay = new Map<SpectralLineOptions, boolean>();
        Object.values(SpectralLineOptions).forEach(option => this.optionsDisplay.set(option, false));
        this.redshiftType = RedshiftType.V;
        this.redshiftSpeed = 0;
        this.queryResultTableRef = undefined;
        this.numVisibleRows = 1;
    }
}
