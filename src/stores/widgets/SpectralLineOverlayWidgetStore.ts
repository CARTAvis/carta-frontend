import {action, computed, observable} from "mobx";
import {NumberRange} from "@blueprintjs/core";
import {Table} from "@blueprintjs/table";
import {CARTA} from "carta-protobuf";
import {AppStore} from "stores";
import {RegionWidgetStore, RegionsType} from "./RegionWidgetStore";
import {ProcessedColumnData} from "models";

export enum SpectralLineQueryRangeType {
    Range = "Range",
    Center = "Center"
}

export enum SpectralLineQueryUnit {
    GHz = "GHz",
    MHz = "MHz",
    CM = "cm",
    MM = "mm"
}

export enum SpectralLineOptions {
    Formula = "FORMULA",
    Name = "NAME",
    Frequency = "FREQ",
    RedshiftedFrequency = "REDSHIFTED_FREQ",
    QuantumNumber = "QN",
    Intensity = "I",
    AstroFilter = "ASTRO"
}

export const SPECTRAL_LINE_OPTION_DESCRIPTIONS = [
    [SpectralLineOptions.Formula, "Chemical formula of the Species"],
    [SpectralLineOptions.Name, "Name of the Species"],
    [SpectralLineOptions.Frequency, "Rest Frequency (MHz)"],
    [SpectralLineOptions.RedshiftedFrequency, "Redshifted Frequency (MHz)(generated by box on the right)"],
    [SpectralLineOptions.QuantumNumber, "Resolved Quantum Number"],
    [SpectralLineOptions.Intensity, "Intensity(for JPL/CDMS)"],
    [SpectralLineOptions.AstroFilter, "Astronomical Filter(Dark Cloud, Extragalatic, ...)"]
];

export enum RedshiftType {
    V = "V",
    Z = "Z"
}

export class SpectralLineOverlayWidgetStore extends RegionWidgetStore {
    @observable queryRangeType: SpectralLineQueryRangeType;
    @observable queryRange: NumberRange;
    @observable queryRangeByCenter: NumberRange;
    @observable queryUnit: SpectralLineQueryUnit;
    @observable isQuerying: boolean;
    @observable optionsDisplay: Map<SpectralLineOptions, boolean>;
    @observable redshiftType: RedshiftType;
    @observable redshiftSpeed: number;
    @observable queryResultTableRef: Table;
    @observable queryResult: Map<number, ProcessedColumnData>;
    @observable numVisibleRows: number;

    @action setQueryRangeType = (queryRangeType: SpectralLineQueryRangeType) => {
        this.queryRangeType = queryRangeType;
    };

    @action setQueryRange = (queryRange: NumberRange) => {
        this.queryRange = queryRange;
    };

    @action setQueryRangeByCenter = (queryRange: NumberRange) => {
        this.queryRangeByCenter = queryRange;
    };

    @action setQueryUnit = (queryUnit: SpectralLineQueryUnit) => {
        this.queryUnit = queryUnit;
    };

    @action setOptionsDisplay = (option: SpectralLineOptions) => {
        this.optionsDisplay.set(option, !this.optionsDisplay.get(option));
    };

    @action setRedshiftType = (redshiftType: RedshiftType) => {
        this.redshiftType = redshiftType;
     };

    @action setRedshiftSpeed = (speed: number) => {
        if (isFinite(speed)) {
            this.redshiftSpeed = speed;
        }
    };

    @action setQueryResultTableRef(ref: Table) {
        this.queryResultTableRef = ref;
    }

    @computed get displayedColumnHeaders(): Array<CARTA.CatalogHeader> {
        let displayedColumnHeaders = [];
        return displayedColumnHeaders;
    }

    public query = () => {
        let freqMHzFrom = 0;
        let freqMHzTo = 0;
        if (this.queryRangeType === SpectralLineQueryRangeType.Range) {
            if (this.queryUnit === SpectralLineQueryUnit.CM) {
            } else if (this.queryUnit === SpectralLineQueryUnit.MM) {
            } else if (this.queryUnit === SpectralLineQueryUnit.GHz) {
                freqMHzFrom = this.queryRange[0] * 1000;
                freqMHzTo = this.queryRange[1] * 1000;
            } else {
                freqMHzFrom = this.queryRange[0];
                freqMHzTo = this.queryRange[1];
            }
        } else {
            if (this.queryUnit === SpectralLineQueryUnit.CM) {
            } else if (this.queryUnit === SpectralLineQueryUnit.MM) {
            } else if (this.queryUnit === SpectralLineQueryUnit.GHz) {
                freqMHzFrom = (this.queryRangeByCenter[0] - this.queryRangeByCenter[1]) * 1000;
                freqMHzTo = (this.queryRangeByCenter[0] + this.queryRangeByCenter[1]) * 1000;
            } else {
                freqMHzFrom = this.queryRangeByCenter[0] - this.queryRangeByCenter[1];
                freqMHzTo = this.queryRangeByCenter[0] + this.queryRangeByCenter[1];
            }
        }

        const queryURL = "https://www.cv.nrao.edu/php/splat/c_export.php?submit=Search&chemical_name=&sid%5B%5D=1154&calcIn=&data_version=v3.0&redshift=&freqfile=&energy_range_from=&energy_range_to=&lill=on&displayJPL=displayJPL&displayCDMS=displayCDMS&displayLovas=displayLovas&displaySLAIM=displaySLAIM&displayToyaMA=displayToyaMA&displayOSU=displayOSU&displayRecomb=displayRecomb&displayLisa=displayLisa&displayRFI=displayRFI&ls1=ls1&ls5=ls5&el1=el1&export_type=current&export_delimiter=tab&offset=0&limit=501&range=on&submit=Export";
        const queryLink = queryURL + `&frequency_units=MHz&from=${freqMHzFrom}&to=${freqMHzTo}`;

        this.isQuerying = true;
        fetch(queryLink, {
            mode: 'no-cors'
        }).then(response => {
            this.isQuerying = false;
            console.log(response.text());
        }).catch((err) => {
            this.isQuerying = false;
            console.log(err);
        });
    };

    constructor() {
        super(RegionsType.CLOSED);
        this.queryRangeType = SpectralLineQueryRangeType.Range;
        this.queryRange = [0, 0];
        this.queryRangeByCenter = [0, 0];
        this.queryUnit = SpectralLineQueryUnit.GHz;
        this.isQuerying = false;
        this.optionsDisplay = new Map<SpectralLineOptions, boolean>();
        Object.values(SpectralLineOptions).forEach(option => this.optionsDisplay.set(option, false));
        this.redshiftType = RedshiftType.V;
        this.redshiftSpeed = 0;
        this.queryResultTableRef = undefined;
        this.numVisibleRows = 1;
    }
}
