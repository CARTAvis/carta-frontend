import * as React from "react";
import {action, computed, observable} from "mobx";
import {observer} from "mobx-react";
import {Checkbox, FormGroup, HTMLSelect, Button} from "@blueprintjs/core";
import ReactResizeDetector from "react-resize-detector";
import {AppStore, HelpType, WidgetConfig, WidgetProps, WidgetsStore} from "stores";
import {SpectralLineOverlayWidgetStore} from "stores/widgets";
import "./SpectralLineOverlayComponent.css";

const SPECTRAL_LINE_OPTIONS = [
    {name: "FORMULA", description: "Chemical formula of the Species"},
    {name: "NAME", description: "Name of the Species"},
    {name: "FREQ", description: "Rest Frequency (MHz)"},
    {name: "REDSHIFTED_FREQ", description: "Redshifted Frequency (MHz)(generated by box on the right)"},
    {name: "QN", description: "Resolved Quantum Number"},
    {name: "I", description: "Intensity(for JPL/CDMS)"},
    {name: "ASTRO", description: "Astronomical Filter(Dark Cloud, Extragalatic, ...)"}
];

@observer
export class SpectralLineOverlayComponent extends React.Component<WidgetProps> {
    @observable width: number;
    @observable height: number;
    @observable widgetId: string;

    public static get WIDGET_CONFIG(): WidgetConfig {
        return {
            id: "spectral-line-overlay",
            type: "spectral-line-overlay",
            minWidth: 320,
            minHeight: 400,
            defaultWidth: 600,
            defaultHeight: 350,
            title: "Spectral Line Overlay",
            isCloseable: true,
            helpType: HelpType.SPECTRAL_LINE_OVERLAY,
            componentId: "spectral-line-overlay-component"
        };
    }

    @computed get widgetStore(): SpectralLineOverlayWidgetStore {
        const widgetsStore = WidgetsStore.Instance;
        if (widgetsStore.spectralLineOverlayWidgets) {
            const widgetStore = widgetsStore.spectralLineOverlayWidgets.get(this.props.id);
            if (widgetStore) {
                return widgetStore;
            }
        }
        console.log("can't find store for widget");
        return new SpectralLineOverlayWidgetStore();
    }

    onResize = (width: number, height: number) => {
        this.width = width;
        this.height = height;
    };

    private handlePlot = () => {
        return;
    };

    render() {
        const appStore = AppStore.Instance;
        const widgetStore = this.widgetStore;

        const wcsGroup = (
            <FormGroup label="WCS Group" inline={true}>
                <HTMLSelect/>
            </FormGroup>
        );

        const optionTable = (
            <table>
                <thead>
                    <tr>
                        <th>Name</th><th>Description</th><th>Display</th><th>Label</th>
                    </tr>
                </thead>
                <tbody>
                    {SPECTRAL_LINE_OPTIONS.map(option =>
                        <tr key={option.name}>
                            <td>{option.name}</td>
                            <td>{option.description}</td>
                            <td><Checkbox checked={true} onChange={() => {}}/></td>
                            <td><Checkbox checked={true} onChange={() => {}}/></td>
                        </tr>
                    )}
                </tbody>
            </table>
        );

        const resultTable = (
            <table>
                <thead>
                    <tr>
                        <th>FORMULA</th><th>NAME</th><th>FREQ</th><th>REDSHIFTED_FREQ</th><th>ASTRO</th>
                    </tr>
                </thead>
            </table>
        );

        let className = "spectral-line-overlay-widget";
        if (appStore.darkTheme) {
            className += " dark-theme";
        }

        return (
            <div className={className}>
                {wcsGroup}
                {optionTable}
                {resultTable}
                <div className="spectral-line-plot">
                    <Button intent="success" onClick={this.handlePlot}>Plot</Button>
                </div>
                <ReactResizeDetector handleWidth handleHeight onResize={this.onResize} refreshMode={"throttle"} refreshRate={33}/>
            </div>
        );
    }
}
